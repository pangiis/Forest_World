using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class PlayerController : MonoBehaviour
{
    //필요한 컴포넌트
    [SerializeField]
    private float walkSpeed;
    [SerializeField]
    private float runSpeed;
    private Rigidbody myRigid;
    private Crosshair theCrosshair;
    [SerializeField]
    private float lookSensitivity;
    [SerializeField]
    private float cameraRotationLimit;
    private float currentCameraRotationX = 0;
    Animator anim;
    bool wDown;
    bool wJump;
    Vector3 moveVec;
    [SerializeField]
    private float jumpForce;
    private bool isGround = true;
    private CapsuleCollider capsuleCollider;
    private StatusController theStatusController;
    [SerializeField]
    private Camera theCamera;
    private float applySpeed;

    static public bool isActivated = true;

    // Start is called before the first frame update

    void Start()
    {
        
        capsuleCollider = GetComponent<CapsuleCollider>();
        myRigid = GetComponent<Rigidbody>();
        anim = GetComponentInChildren<Animator>();
        theStatusController = FindObjectOfType<StatusController>();

        applySpeed = walkSpeed;
    }

    // Update is called once per frame
    void Update()
    {
        if (isActivated && GameManager.canPlayerMove)
        {
            IsGround();
            TryJump();


            Move();

            CameraRotation();
            CharacterRotation();
           
            
            if (!Inventory.inventoryActivated)
            {
                CameraRotation();
                CharacterRotation();
            }
            TryJump();
            IsGround();
            

        }

    }
        //점프 활성화
    private void TryJump()
    {
        if (Input.GetKeyDown(KeyCode.Space) && isGround && theStatusController.GetCurrentSP() > 0)
        {
            Jump();
        }
    }
    // 점프
    private void Jump()
    {
        myRigid.velocity = transform.up * jumpForce;
        theStatusController.DecreaseStamina(100);
    }

    public bool GetRun()
    {
        return isGround;
    }


    // 지면 체크
    private void IsGround()
    {
        isGround = Physics.Raycast(transform.position, Vector3.down, capsuleCollider.bounds.extents.y + 0.1f);
    }
    //플레이어 움직임
    private void Move()
    {

        float _moveDirX = Input.GetAxisRaw("Horizontal");
        float _moveDirY = Input.GetAxisRaw("Vertical");
        wDown = Input.GetButton("Walk");
        wJump = Input.GetButton("Jump");


        moveVec = new Vector3(_moveDirX, 0, _moveDirY).normalized * walkSpeed;

        anim.SetBool("isRun", moveVec != Vector3.zero);
        anim.SetBool("isWalk", wDown);
        anim.SetBool("isJump",wJump);

        Vector3 _moveHorizontal = transform.right * _moveDirX;
        Vector3 _moveVertical = transform.forward * _moveDirY;

        Vector3 _velocity = (_moveHorizontal + _moveVertical).normalized * walkSpeed;

        myRigid.MovePosition(transform.position + _velocity *(wDown? 0.3f : 1f)* Time.deltaTime);

    }
    //카메라 움직임
    private void CameraRotation()
    {
        float _xRotation = Input.GetAxisRaw("Mouse Y");
        float _cameraRotationX = _xRotation * lookSensitivity;
        currentCameraRotationX -= _cameraRotationX;
        currentCameraRotationX = Mathf.Clamp(currentCameraRotationX, -cameraRotationLimit, cameraRotationLimit);

        theCamera.transform.localEulerAngles = new Vector3(currentCameraRotationX, 0f, 0f);
    }
    // 좌우 캐릭터 회전
    private void CharacterRotation()
    {
        float _yRotation = Input.GetAxisRaw("Mouse X");
        Vector3 _characterRotationY = new Vector3(0f, _yRotation, 0f) * lookSensitivity;
        myRigid.MoveRotation(myRigid.rotation * Quaternion.Euler(_characterRotationY));

    }


}

